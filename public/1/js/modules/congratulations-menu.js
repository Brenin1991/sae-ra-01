/**
 * Congratulations Menu - Menu Din√¢mico de Parab√©ns
 * Controla a sequ√™ncia de elementos na tela de parab√©ns
 */

class CongratulationsMenu {
    constructor() {
        this.currentStep = 0;
        this.gameUrl = 'https://example.com/game'; // URL do jogo - altere conforme necess√°rio
        this.setupEventListeners();
    }
    
    setupEventListeners() {
        // Bot√£o next do menu de parab√©ns
        const btnNext = document.getElementById('btn-next');
        if (btnNext) {
            btnNext.addEventListener('click', () => this.nextStep());
            console.log('‚úÖ Evento do btn-next configurado');
        } else {
            console.error('‚ùå Bot√£o btn-next n√£o encontrado');
        }
        
        // Bot√£o jogar novamente
        const btnJogar = document.getElementById('btn-jogar');
        if (btnJogar) {
            btnJogar.addEventListener('click', () => this.jogarNovamente());
            console.log('‚úÖ Evento do btn-jogar configurado');
        } else {
            console.error('‚ùå Bot√£o btn-jogar n√£o encontrado');
        }
    }
    
    // Inicializar menu
    init() {
        console.log('üéØ Inicializando menu de parab√©ns');
        this.currentStep = 0;
        this.showStep(0);
        
        // Verificar se pr√™mio j√° foi reclamado
        this.checkPremioStatus();
        
        // Debug: verificar elementos
        this.checkElements();
    }
    
    // Aplicar estado do pr√™mio (chamado quando tela √© mostrada)
    applyPremioState() {
        console.log('üéÅ Aplicando estado do pr√™mio');
        this.checkPremioStatus();
    }
    
    // Mostrar passo espec√≠fico
    showStep(step) {
        console.log(`üéØ Mostrando passo ${step}`);
        
        const texto01 = document.getElementById('parabens-texto-01');
        const texto02 = document.getElementById('parabens-texto-02');
        const premioEmptyContainer = document.getElementById('premio-empty-container');
        const premio01 = document.getElementById('premio-01');
        const btnNext = document.getElementById('btn-next');
        const btnCertificado = document.getElementById('btn-certificado');
        
        if (step === 0) {
            // Passo 0: Texto 01, pr√™mio 01 sempre vis√≠vel, bot√£o next vis√≠vel
            if (texto01) texto01.style.display = 'block';
            if (texto02) texto02.style.display = 'none';
            if (premioEmptyContainer) premioEmptyContainer.style.display = 'none';
            if (premio01) premio01.style.display = 'block'; // SEMPRE VIS√çVEL
            if (btnNext) btnNext.style.display = 'block';
            if (btnCertificado) btnCertificado.style.display = 'none'; // Escondido at√© pr√™mio ser liberado
            
            console.log('‚úÖ Passo 0: Texto 01 vis√≠vel, pr√™mio 01 sempre vis√≠vel');
        } else if (step === 1) {
            // Passo 1: Texto 02, pr√™mio 01 sempre vis√≠vel, container vazio vis√≠vel (com empty + btn-jogar), bot√£o next escondido
            if (texto01) texto01.style.display = 'none';
            if (texto02) texto02.style.display = 'block';
            if (premioEmptyContainer) premioEmptyContainer.style.display = 'flex';
            if (premio01) premio01.style.display = 'block'; // SEMPRE VIS√çVEL
            if (btnNext) btnNext.style.display = 'none';
            if (btnCertificado) btnCertificado.style.display = 'none'; // Escondido at√© pr√™mio ser liberado
            
            console.log('‚úÖ Passo 1: Texto 02 vis√≠vel, pr√™mio 01 sempre vis√≠vel, container vazio vis√≠vel (empty + btn-jogar)');
        }
    }
    
    // Pr√≥ximo passo
    nextStep() {
        console.log(`üéØ Pr√≥ximo passo: ${this.currentStep} -> ${this.currentStep + 1}`);
        this.currentStep++;
        this.showStep(this.currentStep);
    }
    
    // Resetar menu
    reset() {
        console.log('üîÑ Resetando menu de parab√©ns');
        this.currentStep = 0;
        this.showStep(0);
    }
    
    // Verificar se elementos existem
    checkElements() {
        const elements = {
            texto01: document.getElementById('parabens-texto-01'),
            texto02: document.getElementById('parabens-texto-02'),
            premioEmptyContainer: document.getElementById('premio-empty-container'),
            premio01: document.getElementById('premio-01'),
            btnNext: document.getElementById('btn-next'),
            btnJogar: document.getElementById('btn-jogar'),
            btnCertificado: document.getElementById('btn-certificado')
        };
        
        console.log('üîç Verificando elementos:');
        Object.entries(elements).forEach(([name, element]) => {
            console.log(`${name}: ${element ? '‚úÖ' : '‚ùå'}`);
            if (element) {
                console.log(`  - Display: ${element.style.display}`);
                console.log(`  - Visible: ${element.offsetParent !== null}`);
            }
        });
        
        return elements;
    }
    
    // Jogar novamente
    jogarNovamente() {
        console.log('üéÆ Jogar novamente clicado');
        
        // Esconder o bot√£o
        const btnJogar = document.getElementById('btn-jogar');
        if (btnJogar) {
            btnJogar.style.display = 'none';
            console.log('‚úÖ Bot√£o escondido');
        } else {
            console.error('‚ùå Bot√£o btn-jogar n√£o encontrado');
        }
        
        // Trocar imagem do empty para premio-01
        const premioEmpty = document.getElementById('premio-empty');
        if (premioEmpty) {
            premioEmpty.src = 'assets/textures/premio-01.png';
            console.log('‚úÖ Imagem trocada para premio-01');
        } else {
            console.error('‚ùå Elemento premio-empty n√£o encontrado');
        }
        
        // Mostrar certificado quando pr√™mio √© liberado
        const btnCertificado = document.getElementById('btn-certificado');
        if (btnCertificado) {
            btnCertificado.style.display = 'block';
            console.log('‚úÖ Certificado vis√≠vel (pr√™mio liberado)');
        } else {
            console.error('‚ùå Bot√£o certificado n√£o encontrado');
        }
        
        // Testar localStorage
        try {
            localStorage.setItem('premioClaimed', 'true');
            localStorage.setItem('premioClaimedDate', new Date().toISOString());
            
            // Verificar se salvou
            const saved = localStorage.getItem('premioClaimed');
            const savedDate = localStorage.getItem('premioClaimedDate');
            
            console.log('üîç Verifica√ß√£o localStorage:');
            console.log('  - premioClaimed:', saved);
            console.log('  - premioClaimedDate:', savedDate);
            
            if (saved === 'true') {
                console.log('‚úÖ Status salvo no localStorage com sucesso');
            } else {
                console.error('‚ùå Falha ao salvar no localStorage');
            }
        } catch (error) {
            console.error('‚ùå Erro ao salvar no localStorage:', error);
        }
        
        // Abrir link em nova aba
        window.open(this.gameUrl, '_blank');
        
        console.log('‚úÖ Link aberto em nova aba:', this.gameUrl);
    }
    
    // Configurar URL do jogo
    setGameUrl(url) {
        this.gameUrl = url;
        console.log('üîó URL do jogo configurada:', url);
    }
    
    // Verificar status do pr√™mio no localStorage
    checkPremioStatus() {
        try {
            const premioClaimed = localStorage.getItem('premioClaimed');
            const premioClaimedDate = localStorage.getItem('premioClaimedDate');
            
            console.log('üîç Verificando localStorage:');
            console.log('  - premioClaimed:', premioClaimed);
            console.log('  - premioClaimedDate:', premioClaimedDate);
            
            if (premioClaimed === 'true') {
                console.log('üéÅ Pr√™mio j√° foi reclamado anteriormente');
                
                // Aplicar estado de pr√™mio reclamado
                const btnJogar = document.getElementById('btn-jogar');
                const premioEmpty = document.getElementById('premio-empty');
                const btnCertificado = document.getElementById('btn-certificado');
                
                if (btnJogar) {
                    btnJogar.style.display = 'none';
                    console.log('‚úÖ Bot√£o escondido (pr√™mio j√° reclamado)');
                } else {
                    console.error('‚ùå Bot√£o btn-jogar n√£o encontrado');
                }
                
                if (premioEmpty) {
                    premioEmpty.src = 'assets/textures/premio-01.png';
                    console.log('‚úÖ Imagem j√° √© premio-01 (pr√™mio j√° reclamado)');
                } else {
                    console.error('‚ùå Elemento premio-empty n√£o encontrado');
                }
                
                // Mostrar certificado quando pr√™mio √© liberado
                if (btnCertificado) {
                    btnCertificado.style.display = 'block';
                    console.log('‚úÖ Certificado vis√≠vel (pr√™mio liberado)');
                } else {
                    console.error('‚ùå Bot√£o certificado n√£o encontrado');
                }
            } else {
                console.log('üéÅ Pr√™mio ainda n√£o foi reclamado');
                
                // Esconder certificado se pr√™mio n√£o foi liberado
                const btnCertificado = document.getElementById('btn-certificado');
                if (btnCertificado) {
                    btnCertificado.style.display = 'none';
                    console.log('‚úÖ Certificado escondido (pr√™mio n√£o liberado)');
                }
            }
        } catch (error) {
            console.error('‚ùå Erro ao verificar localStorage:', error);
        }
    }
    
    // Debug: For√ßar mostrar container vazio
    debugShowPremioEmpty() {
        const premioEmptyContainer = document.getElementById('premio-empty-container');
        if (premioEmptyContainer) {
            premioEmptyContainer.style.display = 'flex';
            premioEmptyContainer.style.visibility = 'visible';
            premioEmptyContainer.style.opacity = '1';
            console.log('üîß DEBUG: Container vazio for√ßado a aparecer');
        } else {
            console.error('‚ùå DEBUG: Container vazio n√£o encontrado');
        }
    }
    
    // Debug: Resetar pr√™mio (para testes)
    debugResetPremio() {
        try {
            localStorage.removeItem('premioClaimed');
            localStorage.removeItem('premioClaimedDate');
            
            const btnJogar = document.getElementById('btn-jogar');
            const premioEmpty = document.getElementById('premio-empty');
            const btnCertificado = document.getElementById('btn-certificado');
            
            if (btnJogar) {
                btnJogar.style.display = 'block';
            }
            
            if (premioEmpty) {
                premioEmpty.src = 'assets/textures/premio-empty.png';
            }
            
            if (btnCertificado) {
                btnCertificado.style.display = 'none';
            }
            
            console.log('üîß DEBUG: Pr√™mio resetado para estado inicial');
        } catch (error) {
            console.error('‚ùå Erro ao resetar pr√™mio:', error);
        }
    }
    
    // Debug: Testar localStorage
    debugTestLocalStorage() {
        try {
            console.log('üß™ Testando localStorage...');
            
            // Teste de escrita
            localStorage.setItem('test', 'value');
            const testValue = localStorage.getItem('test');
            console.log('  - Teste de escrita:', testValue === 'value' ? '‚úÖ' : '‚ùå');
            
            // Teste de leitura
            const premioClaimed = localStorage.getItem('premioClaimed');
            console.log('  - premioClaimed atual:', premioClaimed);
            
            // Teste de remo√ß√£o
            localStorage.removeItem('test');
            const removedValue = localStorage.getItem('test');
            console.log('  - Teste de remo√ß√£o:', removedValue === null ? '‚úÖ' : '‚ùå');
            
            console.log('üß™ Teste localStorage conclu√≠do');
        } catch (error) {
            console.error('‚ùå localStorage n√£o suportado:', error);
        }
    }
}

// Criar inst√¢ncia global
window.congratulationsMenu = new CongratulationsMenu();

// Verificar status do pr√™mio sempre que a p√°gina carrega
document.addEventListener('DOMContentLoaded', () => {
    if (window.congratulationsMenu) {
        console.log('üåê P√°gina carregada - verificando status do pr√™mio');
        window.congratulationsMenu.checkPremioStatus();
    }
});

// Exportar para uso global
window.CongratulationsMenu = CongratulationsMenu; 